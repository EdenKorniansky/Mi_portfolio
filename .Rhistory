# Import gene expression data (TPM normalized counts)
genes <- read.delim("Data/GSE229904_norm_counts_TPM_GRCh38.p13_NCBI.tsv.gz")
# Import phenotypic/clinical metadata
# The first column is set as row names
feno <- read.csv("Data/GSE229904_Annotations.csv", row.names = 1)
# Remove columns that start with the word "character"
library(tidyverse)
feno <- feno %>%
dplyr::select(!starts_with("character"))
# Clean column names: remove the ".ch1" suffix at the end of column names
colnames(feno) <- gsub("\\.ch1$", "", colnames(feno))
# Convert relevant columns to factors
# You can customize this list depending on your dataset
cols_to_factor <- c("gleason.primary", "gleason.secondary", "gleason.sum", "risk.group",
"source_name", "description", "library_selection", "library_strategy",
"biochemical.recurrence", "cm", "isup", "lapc", "pn", "pt",
"residual_tumor", "tmprss2.erg")
# Apply factor conversion
feno[cols_to_factor] <- lapply(feno[cols_to_factor], factor)
# Apply factor conversion
feno[cols_to_factor] <- lapply(feno[cols_to_factor], factor)
# Convert relevant columns to factors
# You can customize this list depending on your dataset
cols_to_factor <- c("gleason.primary", "gleason.secondary", "gleason.sum", "risk.group",
"source_name", "description", "library_selection", "library_strategy",
"biochemical.recurrence", "cm", "isup", "lapc", "pn", "pt",
"residual_tumor", "tmprss2.erg")
# Apply factor conversion
feno[cols_to_factor] <- lapply(feno[cols_to_factor], factor)
# Apply factor conversion
valid_cols <- intersect(cols_to_factor, colnames(feno))
feno[valid_cols] <- lapply(feno[valid_cols], factor)
# Check if certain columns are numeric (should return a numeric vector preview)
feno$age
feno$gleason.primary
feno$gleason.secondary
feno$gleason.sum
feno$isup
feno$ln.percent
feno$postop.psa
feno$preop.psa
# Check for possible redundancy or invariant columns
# These tables allow you to see if the columns contain repeated or identical values
table(feno$description)
table(feno$library_selection)
table(feno$library_strategy)
table(feno$cm)
table(feno$lapc)
table(feno$residual_tumor)
table(feno$risk.group)
#Quantity of primary tumor tissue and normal prostatic tissue?
tipo_tejido <- table(feno$source_name_ch1)
tipo_tejido
# How many patients of each age have each type of primary/secondary Gleason score?
table(feno$gleason.primary, feno$age)
table(feno$gleason.secondary, feno$age)
table(feno$gleason.sum, feno$age)
table(feno$biochemical.recurrence)
table(feno$tmprss2.erg)
# Age histogram
library(ggplot2)
feno$age
ggplot(feno, aes(x = age)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = "Age Histogram", x = "Age", y = "Frequency") +
theme_minimal()
ggsave("HistEdades.png", bg = "white", height = 4, width = 6, units = "in")
# Is there an association between the primary Gleason pattern and preoperative PSA? (jitter plot)
ggplot(feno, aes(x = gleason.primary, y = preop.psa)) +
geom_jitter(width = 0.1)
# Is there an association between the secondary Gleason pattern and postoperative PSA? (jitter plot)
ggplot(feno, aes(x = gleason.secondary, y = postop.psa)) +
geom_jitter(width = 0.1)
# Is there an association between the secondary Gleason pattern and preoperative PSA? (jitter plot)
ggplot(feno, aes(x = gleason.secondary, y = preop.psa)) +
geom_jitter(width = 0.1)
# Is there an association between the primary Gleason pattern and postoperative PSA? (jitter plot)
ggplot(feno, aes(x = gleason.primary, y = postop.psa)) +
geom_jitter(width = 0.1)
library(skimr)
library(gtsummary)
library(tidyverse)
library(gt)
skim(feno)
# For getting a better summary of patient characteristics:
# General summary provided by R
tab1 <- feno %>% select(-title, -geo_accession, -gleason.primary, -gleason.secondary) %>%
tbl_summary()
gtsave(data = as_gt(tab1), filename = "prueba.gt.feno.png")
setwd("C:/Users/edenk/OneDrive/Pasantía Cáncer de Próstata/GSE229904")
# import datos expresion genetica
genes <- read.delim("C:/Users/edenk/OneDrive/Pasantía Cáncer de Próstata/GSE229904/GSE229904_norm_counts_TPM_GRCh38.p13_NCBI.tsv.gz")
View(genes)
# import datos fenotipicos
feno <- read.csv("C:/Users/edenk/OneDrive/Pasantía Cáncer de Próstata/GSE229904/GSE229904_Annotations.csv", row.names=1)
View(feno)
#elimino columnas que no necesito
library(tidyverse)
feno <- feno %>%
dplyr::select(!starts_with("character"))
#gsub("\\.ch1$", "", colnames(tabla)): Reemplaza el sufijo .ch1 al final ($ indica "al final de la cadena") con una cadena vacía ("").
colnames(feno) <- gsub("\\.ch1$", "", colnames(feno))
#factores de cada columna de gleason
cols_to_factor <- c("gleason.primary", "gleason.secondary", "gleason.sum", "risk.group",
"source_name_ch1", "description", "library_selection", "library_strategy",
"biochemical.recurrence", "cm", "isup", "lapc", "pn", "pt",
"r.residual_tumor", "tmprss2.erg")
feno[cols_to_factor] <- lapply(feno[cols_to_factor], factor)
#corroboro si esta en formato numerico
feno$age
feno$gleason.primary
feno$gleason.secondary
feno$gleason.sum
feno$isup
feno$ln.percent
feno$postop.psa
feno$preop.psa
#corroboro si hay columnas que tienen la misma informacion y por lo tanto, deberia borrarlas
table(feno$description)
table(feno$library_selection)
table(feno$library_strategy)
table(feno$cm)
table(feno$lapc)
table(feno$r.residual_tumor)
table(feno$risk.group)
#promedios y medianas de edad y psa
prom_edad <- mean(feno$age, na.rm = T)
round(prom_edad)
#forma mas eficiente de verlo
summary(feno$age)
mediana_edad <- median(feno$age, na.rm = T)
mediana_edad
prom_psa_postop <- mean(feno$postop.psa, na.rm = T)
round(prom_psa_postop)
prom_psa_preop <- mean(feno$preop.psa, na.rm = T)
round(prom_psa_preop)
#Hay mayor tejido de tumor primario que de tejido normal prostatico
tipo_tejido <- table(feno$source_name_ch1)
tipo_tejido
#cuantos pacientes de cada edad tienen gleason primario/secundario de cada tipo
table(feno$gleason.primary, feno$age)
table(feno$gleason.secondary, feno$age)
table(feno$gleason.sum, feno$age)
table(feno$biochemical.recurrence)
table(feno$tmprss2.erg)
#Histograma de edad
library(ggplot2)
feno$age
# See all column names in feno
colnames(feno)
# Create a list of all variables that contain relevant information from feno
variables <- colnames(feno)[c(3:9, 12:22)]
print(variables)
# Store these variables in a list
lista_variables <- as.list(variables)
print(lista_variables)
# Replace the path below with the folder where you want to save your data
saveRDS(feno, file = "path/to/your/folder/PhenotypicTable.rds")
feno1 <- feno %>%
dplyr::filter(library_strategy == "RNA-Seq" & source_name_ch1 == "primary tumor")
# Adapt the genes table to match feno1; the result is called genes1
genes1 <- genes %>%
dplyr::select('GeneID', any_of(feno1$geo_accession))
# Create a summary table of feno1 using gtsummary, excluding irrelevant columns
tab2 <- feno1 %>%
select(-title, -geo_accession, -gleason.primary, -gleason.secondary, -ID.paciente, -ID.paciente.resto,
-source_name_ch1, -library_strategy, -description, -library_selection) %>%
tbl_summary()
# Save the summary table as a .png file
gtsave(data = as_gt(tab2), filename = "prueba.gt.feno1.png")
feno1 <- feno %>%
dplyr::filter(library_strategy == "RNA-Seq" & source_name_ch1 == "primary tumor")
# Adapt the genes table to match feno1; the result is called genes1
genes1 <- genes %>%
dplyr::select('GeneID', any_of(feno1$geo_accession))
# Create a summary table of feno1 using gtsummary, excluding irrelevant columns
tab2 <- feno1 %>%
select(-title, -geo_accession, -gleason.primary, -gleason.secondary, -ID.paciente, -ID.paciente.resto,
-source_name_ch1, -library_strategy, -description, -library_selection) %>%
tbl_summary()
# Save the summary table as a .png file
gtsave(data = as_gt(tab2), filename = "prueba.gt.feno1.png")
feno1 <- feno %>%
dplyr::filter(library_strategy == "RNA-Seq" & source_name_ch1 == "primary tumor")
# Adapt the genes table to match feno1; the result is called genes1
genes1 <- genes %>%
dplyr::select('GeneID', any_of(feno1$geo_accession))
# Create a summary table of feno1 using gtsummary, excluding irrelevant columns
tab2 <- feno1 %>%
select(-title, -geo_accession, -gleason.primary, -gleason.secondary, -ID.paciente, -ID.paciente.resto,
-source_name_ch1, -library_strategy, -description, -library_selection) %>%
tbl_summary()
# Create a new column with patient ID, extracting the first 1 to 3 digits (optionally preceded by a letter)
feno$ID.paciente <- str_extract(feno$title, "^[A-Za-z]?[0-9]{1,3}")
# Create a second column with the remaining part of the title, representing the sample or analysis type
feno$ID.paciente.resto <- str_remove(feno$title, "^[A-Za-z]?[0-9]{1,3}")
# Reorder columns for easier visualization and sort by patient ID and sample type
feno <- feno %>%
select(title, ID.paciente, ID.paciente.resto, source_name_ch1, library_strategy, everything()) %>%
arrange(ID.paciente, source_name_ch1)
# Create a summary table of feno1 using gtsummary, excluding irrelevant columns
tab2 <- feno1 %>%
select(-title, -geo_accession, -gleason.primary, -gleason.secondary, -ID.paciente, -ID.paciente.resto,
-source_name_ch1, -library_strategy, -description, -library_selection) %>%
tbl_summary()
# Save the summary table as a .png file
gtsave(data = as_gt(tab2), filename = "prueba.gt.feno1.png")
# Create a summary table of feno1 using gtsummary, excluding irrelevant columns
tab2 <- feno1 %>%
select(-title, -geo_accession, -gleason.primary, -gleason.secondary, -ID.paciente, -ID.paciente.resto,
-source_name_ch1, -library_strategy, -description, -library_selection) %>%
tbl_summary()
# 1. Evaluated using biochemical recurrence status
library(ggpubr)
ggplot(data = feno1 %>% filter(biochemical.recurrence != "NA"),
aes(x = biochemical.recurrence, y = age)) +
geom_boxplot(fill = "violet") +
labs(title = "Age distribution by biochemical recurrence status",
x = "Biochemical recurrence",
y = "Age (years)") +
theme_minimal() +
scale_y_continuous(breaks = seq(floor(min(feno1$age, na.rm = TRUE) / 5) * 5,
ceiling(max(feno1$age, na.rm = TRUE) / 5) * 5,
by = 5)) +
stat_compare_means(method = "t.test", label = "p.format")
# 2. Evaluated based on postoperative PSA levels
# Need to determine a PSA threshold that is clinically relevant for recurrence.
# For now, we use an arbitrary cutoff of 0.30
ggplot(feno1, aes(x = postop.psa >= 0.3, y = age)) +
geom_boxplot(fill = "violet") +
scale_x_discrete(labels = c(">0.3", "<=0.3")) +
labs(title = "Age distribution by postoperative PSA levels",
x = "Postoperative PSA levels",
y = "Age (years)") +
theme_minimal()
